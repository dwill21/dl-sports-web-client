import Head from 'next/head';
import Script from 'next/script';
import { useEffect } from 'react';
import { spotifyAPI } from '../additional';
import restClient from '../utils/apollo-client-rest';
import { gql } from '@apollo/client';
import { Button } from '@material-tailwind/react';

type PodcastProps = {
  episodes: {
    id: string
    name: string
  }[]
}

const switchEpisodes = (embedController: { loadUri: (uri: string) => void }) => {
  document.querySelectorAll('#other-episodes > button').forEach(
  episode => {
    episode.addEventListener('click', () => {
      embedController.loadUri(`spotify:episode:${episode.id}`)
    });
  });
};

export default function Podcast({ episodes }: PodcastProps) {
  useEffect(() => {
    window.onSpotifyIframeApiReady = (iFrameAPI: spotifyAPI) => {
      const element = document.getElementById('embed-iframe');
      const options = {
        height: '160px',
        width: '450px',
        uri: `spotify:episode:${episodes[0].id}`
      };
      iFrameAPI.createController(element, options, switchEpisodes);
    };
  })

  return (
    <>
      <Head>
        <title>DL Sports</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Script src="https://open.spotify.com/embed-podcast/iframe-api/v1" async/>

      <div className="my-20 md:px-48 w-screen">
        <h1 className="mt-4 mb-10 md:mb-6 text-3xl text-center">&quot;On the DL&quot; Podcast</h1>
        <div className="flex flex-col md:flex-row gap-16 md:gap-24 justify-between">
          <div id="embed-iframe" className="max-w-screen"></div>

          <div className="w-full lg:w-[450px] max-w-screen h-[500px] bg-grey-200">
            <div className="flex flex-col gap-6" id="other-episodes">
              <h3 className="text-center text-xl">Other Episodes</h3>
              {episodes.map((episode) => (
                <Button key={episode.id} className="w-full h-16" id={episode.id}>
                  {episode.name}
                </Button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export async function getStaticProps() {
  const showId = "6f2oD3RtQY1rOeyfF2OeOa";
  const { data } = await restClient.query({
    query: gql`
        query podcastEpisodes {
            show @rest(type: "Show", path: "shows/${showId}/episodes?offset=0&limit=5&market=US") {
                items {
                    id
                    name
                    description
                }
            }
        }
    `
  });
  return {
    props: {
      episodes: data.show.items
    }
  }
}
