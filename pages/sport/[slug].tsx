import Head from 'next/head';
import ArticleCard from 'components/article-card';
import { Card, CardBody, Typography } from '@material-tailwind/react';
import { gql } from '@apollo/client';
import client from 'utils/apollo-client';
import { NAVBAR_FIELDS, parseNavbarFields } from 'components/navbar';

interface SportProps {
  sport: {
    name: string
    topics: {
      title: string
      content: string
    }[]
  }
}

export default function Sport({ sport }: SportProps) {
  return (
    <>
      <Head>
        <title>DL Sports</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="my-16 md:px-20">
        <Typography as="h1" variant="lead" className="mt-4 mb-6 text-3xl text-center md:text-left">
          {sport.name}
        </Typography>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <ArticleCard className="w-full h-64" title="Lorem ipsum" size="sm"/>

          <div className="w-full md:h-64 md:col-span-2">
            <div className="h-full grid grid-cols-1 lg:grid-cols-2 gap-y-4 gap-x-12 lg:overflow-scroll">
              {[0, 1, 2, 3].map(i => (
                <Card key={i} color="grey">
                  <CardBody className="max-w-full max-h-full">
                    <Typography as="h5" variant="small" className="mb-2 font-bold">
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum auctor eget augue sed convallis.
                    </Typography>
                  </CardBody>
                </Card>
              ))}
            </div>
          </div>

          {sport.topics.map(topic => (
            <Card key={topic.title} className="w-full h-64 px-8 py-2 overflow-y-scroll topic-card">
              <Typography as="h3" variant="lead" className="text-center font-bold mb-2">
                {topic.title}
              </Typography>
              <div dangerouslySetInnerHTML={{ __html: topic.content }}/>
            </Card>
          ))}
        </div>
      </div>
    </>
  )
}

export async function getStaticPaths() {
  const paths = ['mlb'].map(sport => ({ params: { slug: sport } }));
  return { paths, fallback: 'blocking' };
}

export async function getStaticProps({ params }: { params: { slug: string } }) {
  const { data } = await client.query({
    query: gql`
        ${NAVBAR_FIELDS}
        query Sport($slug: String!) {
            sport(slug: $slug) {
                data {
                    attributes {
                        name
                        topics {
                            title
                            content
                        }
                    }
                }
            }
            ...NavbarFields
        }
    `,
    variables: {
      slug: params.slug
    }
  })
  return {
    props: {
      sport: data.sport.data.attributes,
      navbar: parseNavbarFields(data),
    }
  };
}
